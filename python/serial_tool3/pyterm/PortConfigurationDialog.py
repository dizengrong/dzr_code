# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Mon Aug 28 14:57:24 2006

#-------------------------------------------------------------------------------
# Name:        pyterm.PortConfigurationDialog
# Purpose:     Dialog to configure the serial port settings.
#
# Original
# Authors:      Thomas Pani
#
# History:
#   None (at the moment).
#
# Created:     28-August-2006
# Copyright:   (c) 2006 by Thomas Pani
# Licence:     MIT
#-------------------------------------------------------------------------------


import serial
import wx

from pyterm.Helpers import scan_ports
from pyterm.Configuration import PortConfiguration


# begin wxGlade: dependencies
# end wxGlade

class PortConfigurationDialog(wx.Dialog):
    def __init__(self, port_configuration, *args, **kwds):
        # begin wxGlade: PortConfigurationDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.sizer_3_staticbox = wx.StaticBox(self.panel_1, -1, "ASCII file transfer")
        self.sizer_2_copy_staticbox = wx.StaticBox(self.panel_1, -1, "Serial Port")
        self.label_port = wx.StaticText(self.panel_1, -1, "Port:")
        self.label_speed = wx.StaticText(self.panel_1, -1, "Speed:")
        self.label_parity = wx.StaticText(self.panel_1, -1, "Parity:")
        self.choice_port = wx.Choice(self.panel_1, -1, choices=[])
        self.choice_speed = wx.Choice(self.panel_1, -1, choices=[])
        self.choice_parity = wx.Choice(self.panel_1, -1, choices=[])
        self.label_bits = wx.StaticText(self.panel_1, -1, "Bits:")
        self.label_stopbits = wx.StaticText(self.panel_1, -1, "Stopbits:")
        self.label_flow_control = wx.StaticText(self.panel_1, -1, "Flow Control:")
        self.choice_bits = wx.Choice(self.panel_1, -1, choices=[])
        self.choice_stopbits = wx.Choice(self.panel_1, -1, choices=[])
        self.choice_flow_control = wx.Choice(self.panel_1, -1, choices=["none", "RTS/CTS", "Xon/Xoff"])
        self.label_eol_delay = wx.StaticText(self.panel_1, -1, "End of line delay (milliseconds):")
        self.spin_ctrl_eol_delay = wx.SpinCtrl(self.panel_1, -1, "0", min=0, max=500)
        self.checkbox_char_next_line = wx.CheckBox(self.panel_1, -1, "Wait for this special character before passing to next line:")
        self.text_ctrl_char_next_line = wx.TextCtrl(self.panel_1, -1, "")
        self.static_line_1 = wx.StaticLine(self.panel_1, -1)
        self.button_ok = wx.Button(self.panel_1, wx.ID_OK, "&OK")
        self.button_cancel = wx.Button(self.panel_1, wx.ID_CANCEL, "&Cancel")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        self.port_configuration = port_configuration
        
        self.__populate_controls()
        self.__apply_configuration()
        
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_ok)
            

    def __set_properties(self):
        # begin wxGlade: PortConfigurationDialog.__set_properties
        self.SetTitle("Port Configuration")
        self.choice_flow_control.SetSelection(0)
        self.label_eol_delay.Enable(False)
        self.spin_ctrl_eol_delay.Enable(False)
        self.checkbox_char_next_line.Enable(False)
        self.text_ctrl_char_next_line.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PortConfigurationDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(4, 1, 10, 10)
        grid_sizer_4 = wx.FlexGridSizer(1, 3, 0, 10)
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_3 = wx.FlexGridSizer(2, 2, 0, 10)
        sizer_2_copy = wx.StaticBoxSizer(self.sizer_2_copy_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(4, 3, 0, 40)
        grid_sizer_2.Add(self.label_port, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_speed, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_parity, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.choice_port, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.choice_speed, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.choice_parity, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_bits, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_stopbits, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.label_flow_control, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.choice_bits, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.choice_stopbits, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.choice_flow_control, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.AddGrowableCol(0)
        grid_sizer_2.AddGrowableCol(1)
        grid_sizer_2.AddGrowableCol(2)
        sizer_2_copy.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_2_copy, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_eol_delay, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.spin_ctrl_eol_delay, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.checkbox_char_next_line, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.text_ctrl_char_next_line, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.static_line_1, 0, wx.EXPAND, 0)
        grid_sizer_4.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.button_ok, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.button_cancel, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.AddGrowableCol(0)
        grid_sizer_1.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        self.panel_1.SetAutoLayout(True)
        self.panel_1.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self.panel_1)
        grid_sizer_1.SetSizeHints(self.panel_1)
        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableRow(3)
        grid_sizer_1.AddGrowableCol(0)
        sizer_2.Add(self.panel_1, 1, wx.ALL|wx.EXPAND, 5)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()
        # end wxGlade
        
    def __populate_controls(self):
        # find available serial ports
        available = scan_ports()
        self.choice_port.AppendItems(available)
        
        ser = serial.Serial()
        
        for baudrate in ser.BAUDRATES:
            self.choice_speed.Append(str(baudrate))
            
        lex = {'N' : 'none', 'E' : 'even', 'O' : 'odd'}
        for parity in ser.PARITIES:
            self.choice_parity.Append(lex[parity])            
        
        for bytesize in ser.BYTESIZES:
            self.choice_bits.Append(str(bytesize))
            
        for stopbit in ser.STOPBITS:
            self.choice_stopbits.Append(str(stopbit))
        
    def __apply_configuration(self):
        self.choice_port.Select(
           self.choice_port.FindString(self.port_configuration.port))
        self.choice_speed.Select(
           self.choice_speed.FindString(str(self.port_configuration.speed)))
        self.choice_parity.Select(
           self.choice_parity.FindString(self.port_configuration.parity_s))
        self.choice_bits.Select(
           self.choice_bits.FindString(str(self.port_configuration.bits)))
        self.choice_stopbits.Select(
           self.choice_stopbits.FindString(str(self.port_configuration.stopbits)))
        self.choice_flow_control.Select(
           self.choice_flow_control.FindString(self.port_configuration.flow_control_s))
    
    def OnOK(self, event):
        self.port_configuration = PortConfiguration(
                                         self.choice_port.GetStringSelection(),
                                         int(self.choice_speed.GetStringSelection()),
                                         self.choice_parity.GetStringSelection(),
                                         int(self.choice_bits.GetStringSelection()),
                                         int(self.choice_stopbits.GetStringSelection()),
                                         self.choice_flow_control.GetStringSelection()
                                         )
        event.Skip()
        
    def GetPortConfiguration(self):
        return self.port_configuration

# end of class PortConfigurationDialog
